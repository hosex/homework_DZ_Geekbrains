package DZ6
/**
 * 1. Создать классы Собака и Кот с наследованием от класса Животное.
 *
 * 2 Животные могут выполнять действия: бежать, плыть, перепрыгивать препятствие. В качестве
 * параметра каждому методу передается величина, означающая или длину препятствия (для
 * бега и плавания), или высоту (для прыжков).
 *
 * 3 У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.;
 * прыжок: кот 2 м., собака 0.5 м.; плавание: кот не умеет плавать, собака 10 м.).
 *
 * 4 При попытке животного выполнить одно из этих действий, оно должно сообщить результат в
 * консоль. (Например, dog1.run(150); -> результат: run: true)
 *
 * 5 * Добавить животным разброс в ограничениях. То есть у одной собаки ограничение на бег
 * может быть 400 м., у другой 600 м.
 */
public class Main {

    public static void main(String[] args) {
        Animal[] animals = {new Cat() {
            @Override
            public boolean run(double run) {
                return true;
            }

            @Override
            public boolean jump(double jump) {
                return false;
            }

            @Override
            public boolean swim(double swim) {
                return false;
            }
        }, new DogSmall() {
            @Override
            public boolean run(double run) {
                return true;
            }

            @Override
            public boolean jump(double jump) {
                return false;
            }

            @Override
            public boolean swim(double swim) {
                return true;
            }
        }, new DogBig() {
            @Override
            public boolean run(double run) {
                return true;
            }

            @Override
            public boolean jump(double jump) {
                return true;
            }

            @Override
            public boolean swim(double swim) {
                return true;
            }
        }, new DogRandom() {
            @Override
            public boolean run(double run) {
                return true;
            }

            @Override
            public boolean jump(double jump) {
                return true;
            }

            @Override
            public boolean swim(double swim) {
                return true;
            }
        }};

        for (Animal animal : animals) {
            System.out.printf("%s run: %s\n",
                    animal.getClass().getSimpleName(),
                    animal.run(201));

            System.out.printf("%s jump: %s\n",
                    animal.getClass().getSimpleName(),
                    animal.jump(0.5));

            System.out.printf("%s swim: %s\n\n",
                    animal.getClass().getSimpleName(),
                    animal.swim(8));
        }
        Animal cat = new Cat() {
            @Override
            public boolean run(double run) {
                return false;
            }

            @Override
            public boolean jump(double jump) {
                return false;
            }

            @Override
            public boolean swim(double swim) {
                return false;
            }
        };
        Animal dogSmall = new DogSmall() {
            @Override
            public boolean run(double run) {
                return false;
            }

            @Override
            public boolean jump(double jump) {
                return false;
            }

            @Override
            public boolean swim(double swim) {
                return false;
            }
        };
        Animal dogBig = new DogBig() {
            @Override
            public boolean run(double run) {
                return true;
            }

            @Override
            public boolean jump(double jump) {
                return true;
            }

            @Override
            public boolean swim(double swim) {
                return false;
            }
        };


        assert !cat.run(201);
        assert cat.run(200);

        assert !dogSmall.run(0);
        assert !dogSmall.run(351);
        assert dogSmall.run(350);

        assert dogBig.run(351) == true;
        assert dogBig.run(560) == true;
        assert dogBig.run(561) == false;
    }
}


MainClass.java

public class MainClass {
    }



DogRandom.java

public abstract class DogRandom extends Animal {
}


DogBig.java

public abstract class DogBig extends Animal {
}


DogSmall

public abstract class DogSmall extends Animal {
}


Cat.java

public class Cat extends Animal {
    @Override
    public boolean run(double run) {
        return (run > 0 && run <= 200);
    }

    @Override
    public boolean jump(double jump) {
        return (jump > 0 && jump <= 2);
    }

    @Override
    public boolean swim(double swim) {
        return false;
    }
}


Animal.java

public abstract class Animal {
    public abstract boolean run(double run);

    public abstract boolean jump(double jump);

    public abstract boolean swim(double swim);
}
