Main.java

package DZ7;

public class Main {

    /**
     * <p>
     * 1. Расширить задачу про котов и тарелки с едой
     * <p>
     * 2. Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды
     * (например, в миске 10 еды, а кот пытается покушать 15-20)
     * <p>
     * 3. Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту
     * удалось покушать (хватило еды), сытость = true
     * <p>
     * 4. Считаем, что если коту мало еды в тарелке, то он ее просто не трогает, то есть не может быть
     * наполовину сыт (это сделано для упрощения логики программы)
     * <p>
     * 5. Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и
     * потом вывести информацию о сытости котов в консоль
     * <p>
     * 6. Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку
     */
        public static void main(String[] args) {
        Cat[] cats = {
                        new Cat("Barsuk", 10),
                    new Cat("Leon",15),
                    new Cat("Belko", 25),
                    new Cat("Tubzik", 5),
                    new Cat("Carton", 1)
            };

            Plate plate = new Plate(30);

            for (Cat cat : cats) {
                cat.eat(plate);
                cat.info();
            }

            plate.addFood(50);
            plate.info();
        }

    }


Cat.java

package DZ7;

public class Cat {
    private String name;
    private int appetite;
    private boolean hungry;

    Cat(String name, int appetite) {
        this.name = name;
        this.appetite = appetite;
        this.hungry = true;
    }

    void info() {
        String isHungry = !hungry ? "сыт" : "голоден";
        System.out.println(name + ": " + isHungry);
    }

    void eat(Plate plate) {
        if (hungry && plate.decreaseFood(appetite))
            hungry = false;
    }
}



Plate.java

package DZ7;

public class Plate {
    private int food;

    Plate(int food) {
        this.food = food;
    }

    public boolean decreaseFood(int n) {
        int diff = food - n;
        if (diff < 0) return false;

        food -= n;
        return true;
    }

    void addFood(int food) {
        this.food += food;
    }

    void info() {
        System.out.println("plate: " + food);
    }
}


